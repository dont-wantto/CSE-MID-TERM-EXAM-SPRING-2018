1)d)
#include <iostream>                                                                                                                                                  (@Nazrana Nahreen ^_*)                                                                                                                                                                                 NAZRANA NAHREEN *_*)
using namespace std;
class A{
int i;                         // i is private here
};
void set (A ob, int x){         // error is here the set function is trying to acces i outside the class which is not valid
    ob.i=x;                     
}
int main(){
A ob;
set (ob,6);

return 0;
}

2)C)
#include <iostream>
using namespace std;
class CSE{
int a,b,c;
public:
float CSE();                     ///// here defined a function named CSE inside the class CSE. 
  ~CSE (int p)                         This would create a conflict with the class name. 
   {                                   we cannot use the same name for a constructor
                                       and a function within a class.//////
    cout<<"IIUC";                                   
}
};                                         
                             //////also The destructor in C++ doesn't take any arguments.
                                   It should not have any parameters. 
                                   The correct signature for a destructor is simply ~ClassName().
                                    here defined a destructor with an int parameter, which is not valid.////


2)d)
Here's how the compiler might execute the code with the inline function:
In the main function, when int m = max(1, 3); is encountered:
The max function is called with arguments 1 and 3.
The compiler may decide to replace this function call with the actual code of the max function, 
which in this case would be 
the ternary expression return a > b ? a : b;.
The expression return a > b ? a : b; evaluates to 3, since 3 is greater than 1.
So, the value 3 is assigned to the variable m.
The line cout << m << endl; will print 3 to the console.
When cout << max(10, 20) << endl; is encountered:
Again, the compiler may replace this function call with the actual code of the max function.
The expression return a > b ? a : b; evaluates to 20, since 20 is greater than 10.
The value 20 is then printed to the console.
output: 3
        20

3)d)
no the code is not inlined . the reason is,  even though the function is short, inlining a loop might lead to code 
duplication, especially if the loop is large. 
This can increase code size and potentially impact cache behavior.
